# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-10-04 02:58
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('reports', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbaseTestset',
            fields=[
                ('abase_testset_id', models.IntegerField(primary_key=True, serialize=False)),
                ('testset_name', models.TextField()),
                ('comments', models.TextField()),
                ('testset_date', models.DateField()),
            ],
            options={
                'db_table': 'abase_testset',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activity_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('comments', models.TextField(null=True)),
                ('date_of_activity', models.DateField()),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
                ('funding_support', models.TextField(null=True)),
                ('classification', models.TextField()),
                ('type', models.TextField()),
                ('apilog_uri', models.TextField(null=True)),
            ],
            options={
                'db_table': 'activity',
            },
        ),
        migrations.CreateModel(
            name='AssayPlate',
            fields=[
                ('assay_plate_id', models.AutoField(primary_key=True, serialize=False)),
                ('replicate_ordinal', models.IntegerField(db_index=True)),
                ('plate_number', models.IntegerField(db_index=True)),
            ],
            options={
                'db_table': 'assay_plate',
            },
        ),
        migrations.CreateModel(
            name='AssayWell',
            fields=[
                ('assay_well_id', models.AutoField(primary_key=True, serialize=False)),
                ('assay_well_control_type', models.TextField(null=True)),
                ('is_positive', models.BooleanField(db_index=True, default=False)),
                ('confirmed_positive_value', models.TextField(null=True)),
                ('plate_number', models.IntegerField()),
            ],
            options={
                'db_table': 'assay_well',
            },
        ),
        migrations.CreateModel(
            name='AttachedFile',
            fields=[
                ('attached_file_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('contents', models.BinaryField()),
                ('filename', models.TextField()),
                ('type', models.TextField()),
                ('file_date', models.DateField(null=True)),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'attached_file',
            },
        ),
        migrations.CreateModel(
            name='CachedQuery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField(unique=True)),
                ('sql', models.TextField()),
                ('uri', models.TextField()),
                ('params', models.TextField(null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('username', models.CharField(max_length=128)),
                ('count', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'cached_query',
            },
        ),
        migrations.CreateModel(
            name='CherryPickAssayPlate',
            fields=[
                ('cherry_pick_assay_plate_id', models.AutoField(primary_key=True, serialize=False)),
                ('plate_ordinal', models.IntegerField()),
                ('assay_plate_type', models.TextField()),
                ('plating_date', models.DateField(null=True)),
                ('screening_date', models.DateField(null=True)),
                ('attempt_ordinal', models.IntegerField()),
                ('legacy_plate_name', models.TextField(null=True)),
                ('cherry_pick_assay_plate_type', models.CharField(max_length=31)),
            ],
            options={
                'db_table': 'cherry_pick_assay_plate',
            },
        ),
        migrations.CreateModel(
            name='CherryPickRequest',
            fields=[
                ('cherry_pick_request_id', models.AutoField(primary_key=True, serialize=False)),
                ('transfer_volume_per_well_requested', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('date_requested', models.DateField()),
                ('transfer_volume_per_well_approved', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('date_volume_approved', models.DateField(null=True)),
                ('comments', models.TextField(null=True)),
                ('assay_plate_type', models.TextField()),
                ('assay_protocol_comments', models.TextField(null=True)),
                ('cherry_pick_assay_protocols_followed', models.TextField(null=True)),
                ('cherry_pick_followup_results_status', models.TextField(null=True)),
                ('is_randomized_assay_plate_layout', models.BooleanField(default=False)),
                ('keep_source_plate_cherry_picks_together', models.BooleanField(default=True)),
                ('number_unfulfilled_lab_cherry_picks', models.IntegerField(null=True)),
                ('legacy_cherry_pick_request_number', models.IntegerField(null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('wells_to_leave_empty', models.TextField(null=True)),
                ('date_volume_reserved', models.DateField(null=True)),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
                ('max_skipped_wells_per_plate', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'cherry_pick_request',
            },
        ),
        migrations.CreateModel(
            name='Copy',
            fields=[
                ('usage_type', models.TextField()),
                ('name', models.TextField()),
                ('copy_id', models.AutoField(primary_key=True, serialize=False)),
                ('comments', models.TextField()),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_plated', models.DateField(null=True)),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'copy',
            },
        ),
        migrations.CreateModel(
            name='CopyWell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volume', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('initial_volume', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('cherry_pick_screening_count', models.IntegerField(null=True)),
                ('molar_concentration', models.DecimalField(decimal_places=12, max_digits=13, null=True)),
                ('mg_ml_concentration', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('copy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Copy')),
            ],
            options={
                'db_table': 'copy_well',
            },
        ),
        migrations.CreateModel(
            name='DataColumn',
            fields=[
                ('data_column_id', models.AutoField(primary_key=True, serialize=False)),
                ('ordinal', models.IntegerField()),
                ('replicate_ordinal', models.IntegerField(null=True)),
                ('assay_phenotype', models.TextField()),
                ('assay_readout_type', models.TextField()),
                ('comments', models.TextField()),
                ('description', models.TextField()),
                ('how_derived', models.TextField()),
                ('is_follow_up_data', models.BooleanField(default=False)),
                ('name', models.TextField()),
                ('time_point', models.TextField()),
                ('is_derived', models.BooleanField(default=False)),
                ('positives_count', models.IntegerField(null=True)),
                ('channel', models.IntegerField(null=True)),
                ('time_point_ordinal', models.IntegerField(null=True)),
                ('zdepth_ordinal', models.IntegerField(null=True)),
                ('data_type', models.TextField()),
                ('decimal_places', models.IntegerField(null=True)),
                ('strong_positives_count', models.IntegerField(null=True)),
                ('medium_positives_count', models.IntegerField(null=True)),
                ('weak_positives_count', models.IntegerField(null=True)),
                ('derived_from_columns', models.ManyToManyField(related_name='derived_columns', to='db.DataColumn')),
            ],
            options={
                'db_table': 'data_column',
            },
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('gene_id', models.AutoField(primary_key=True, serialize=False)),
                ('entrezgene_id', models.IntegerField(null=True)),
                ('gene_name', models.TextField()),
                ('species_name', models.TextField()),
            ],
            options={
                'db_table': 'gene',
            },
        ),
        migrations.CreateModel(
            name='GeneGenbankAccessionNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genbank_accession_number', models.TextField()),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Gene')),
            ],
            options={
                'db_table': 'gene_genbank_accession_number',
            },
        ),
        migrations.CreateModel(
            name='GeneSymbol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entrezgene_symbol', models.TextField()),
                ('ordinal', models.IntegerField()),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Gene')),
            ],
            options={
                'db_table': 'gene_symbol',
            },
        ),
        migrations.CreateModel(
            name='LabAffiliation',
            fields=[
                ('name', models.TextField(unique=True)),
                ('category', models.TextField()),
                ('lab_affiliation_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'lab_affiliation',
            },
        ),
        migrations.CreateModel(
            name='LabCherryPick',
            fields=[
                ('lab_cherry_pick_id', models.AutoField(primary_key=True, serialize=False)),
                ('assay_plate_row', models.IntegerField(null=True)),
                ('assay_plate_column', models.IntegerField(null=True)),
                ('is_manually_selected', models.NullBooleanField()),
                ('cherry_pick_assay_plate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.CherryPickAssayPlate')),
            ],
            options={
                'db_table': 'lab_cherry_pick',
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('library_id', models.AutoField(primary_key=True, serialize=False)),
                ('library_name', models.TextField(unique=True)),
                ('short_name', models.TextField(unique=True)),
                ('description', models.TextField()),
                ('provider', models.TextField()),
                ('screen_type', models.TextField()),
                ('library_type', models.TextField()),
                ('start_plate', models.IntegerField(unique=True)),
                ('end_plate', models.IntegerField(unique=True)),
                ('screening_status', models.TextField()),
                ('date_received', models.DateField(null=True)),
                ('date_screenable', models.DateField(null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('plate_size', models.TextField()),
                ('latest_released_contents_version_id', models.IntegerField(null=True)),
                ('experimental_well_count', models.IntegerField(null=True)),
                ('is_pool', models.NullBooleanField()),
                ('solvent', models.TextField()),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
                ('version_number', models.IntegerField(default=0)),
                ('is_released', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'library',
            },
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('plate_id', models.AutoField(primary_key=True, serialize=False)),
                ('plate_type', models.TextField()),
                ('plate_number', models.IntegerField()),
                ('well_volume', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('facility_id', models.TextField()),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.TextField()),
                ('stock_plate_number', models.IntegerField(null=True)),
                ('quadrant', models.IntegerField(null=True)),
                ('remaining_well_volume', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('screening_count', models.IntegerField(default=0, null=True)),
                ('cplt_screening_count', models.IntegerField(default=0, null=True)),
                ('experimental_well_count', models.IntegerField(null=True)),
                ('molar_concentration', models.DecimalField(decimal_places=12, max_digits=13, null=True)),
                ('mg_ml_concentration', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('date_plated', models.DateField(null=True)),
                ('date_retired', models.DateField(null=True)),
                ('is_active', models.NullBooleanField()),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
                ('copy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Copy')),
            ],
            options={
                'db_table': 'plate',
            },
        ),
        migrations.CreateModel(
            name='PlateLocation',
            fields=[
                ('plate_location_id', models.AutoField(primary_key=True, serialize=False)),
                ('bin', models.TextField()),
                ('freezer', models.TextField()),
                ('room', models.TextField()),
                ('shelf', models.TextField()),
            ],
            options={
                'db_table': 'plate_location',
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('publication_id', models.AutoField(primary_key=True, serialize=False)),
                ('authors', models.TextField()),
                ('journal', models.TextField()),
                ('pages', models.TextField()),
                ('pubmed_id', models.TextField()),
                ('title', models.TextField()),
                ('volume', models.TextField()),
                ('year_published', models.TextField()),
                ('pubmed_central_id', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'publication',
            },
        ),
        migrations.CreateModel(
            name='RawDataInputFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordinal', models.IntegerField()),
                ('collation_order', models.TextField(null=True)),
                ('conditions', models.TextField(null=True)),
                ('readouts', models.TextField(null=True)),
                ('readout_type', models.TextField(null=True)),
                ('replicates', models.IntegerField(null=True)),
                ('filename', models.TextField(null=True)),
            ],
            options={
                'db_table': 'raw_data_input_file',
            },
        ),
        migrations.CreateModel(
            name='RawDataTransform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate_ranges', models.TextField(null=True)),
                ('output_filename', models.TextField(null=True)),
                ('output_sheet_option', models.TextField(null=True)),
                ('assay_plate_size', models.TextField(null=True)),
                ('assay_positive_controls', models.TextField(null=True)),
                ('assay_negative_controls', models.TextField(null=True)),
                ('assay_other_controls', models.TextField(null=True)),
                ('library_controls', models.TextField(null=True)),
                ('library_plate_size', models.TextField(null=True)),
                ('comments', models.TextField(null=True)),
                ('temp_output_filename', models.TextField(null=True)),
            ],
            options={
                'db_table': 'raw_data_transform',
            },
        ),
        migrations.CreateModel(
            name='Reagent',
            fields=[
                ('reagent_id', models.AutoField(primary_key=True, serialize=False)),
                ('vendor_identifier', models.TextField(null=True)),
                ('vendor_name', models.TextField(null=True)),
                ('vendor_name_synonym', models.TextField(null=True)),
                ('vendor_batch_id', models.TextField(null=True)),
                ('comment', models.TextField(null=True)),
            ],
            options={
                'db_table': 'reagent',
            },
        ),
        migrations.CreateModel(
            name='ResultValue',
            fields=[
                ('result_value_id', models.AutoField(primary_key=True, serialize=False)),
                ('assay_well_control_type', models.TextField(null=True)),
                ('is_exclude', models.NullBooleanField()),
                ('numeric_value', models.FloatField(null=True)),
                ('is_positive', models.NullBooleanField()),
                ('value', models.TextField(null=True)),
                ('data_column', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.DataColumn')),
            ],
            options={
                'db_table': 'result_value',
            },
        ),
        migrations.CreateModel(
            name='Screen',
            fields=[
                ('screen_id', models.AutoField(primary_key=True, serialize=False)),
                ('facility_id', models.TextField(unique=True)),
                ('project_phase', models.TextField(null=True)),
                ('project_id', models.TextField(null=True)),
                ('status', models.TextField(null=True)),
                ('status_date', models.DateField(null=True)),
                ('assay_type', models.TextField(null=True)),
                ('screen_type', models.TextField()),
                ('title', models.TextField()),
                ('summary', models.TextField()),
                ('date_of_application', models.DateField(null=True)),
                ('data_meeting_complete', models.DateField(null=True)),
                ('data_meeting_scheduled', models.DateField(null=True)),
                ('perturbagen_molar_concentration', models.DecimalField(decimal_places=12, max_digits=13, null=True)),
                ('perturbagen_ug_ml_concentration', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('publishable_protocol', models.TextField(null=True)),
                ('publishable_protocol_comments', models.TextField(null=True)),
                ('publishable_protocol_entered_by', models.TextField(null=True)),
                ('publishable_protocol_date_entered', models.DateField(null=True)),
                ('data_sharing_level', models.IntegerField()),
                ('data_privacy_expiration_date', models.DateField(null=True)),
                ('max_allowed_data_privacy_expiration_date', models.DateField(null=True)),
                ('min_allowed_data_privacy_expiration_date', models.DateField(null=True)),
                ('data_privacy_expiration_notified_date', models.DateField(null=True)),
                ('comments', models.TextField(null=True)),
                ('coms_registration_number', models.TextField(null=True)),
                ('coms_approval_date', models.DateField(null=True)),
                ('pubchem_deposited_date', models.DateField(null=True)),
                ('pubchem_assay_id', models.IntegerField(null=True)),
                ('pin_transfer_date_approved', models.DateField(null=True)),
                ('pin_transfer_comments', models.TextField(null=True)),
                ('abase_study_id', models.TextField(null=True)),
                ('abase_protocol_id', models.TextField(null=True)),
                ('study_type', models.TextField(null=True)),
                ('url', models.TextField(null=True)),
                ('to_be_requested', models.BooleanField(default=False)),
                ('see_comments', models.BooleanField(default=False)),
                ('is_billing_for_supplies_only', models.BooleanField(default=False)),
                ('is_fee_form_on_file', models.BooleanField(default=False)),
                ('amount_to_be_charged_for_screen', models.DecimalField(decimal_places=2, max_digits=9, null=True)),
                ('facilities_and_administration_charge', models.DecimalField(decimal_places=2, max_digits=9, null=True)),
                ('fee_form_requested_date', models.DateField(null=True)),
                ('fee_form_requested_initials', models.TextField(null=True)),
                ('billing_info_return_date', models.DateField(null=True)),
                ('date_completed5kcompounds', models.DateField(null=True)),
                ('date_faxed_to_billing_department', models.DateField(null=True)),
                ('date_charged', models.DateField(null=True)),
                ('billing_comments', models.TextField(null=True)),
                ('screened_experimental_well_count', models.IntegerField(default=0)),
                ('unique_screened_experimental_well_count', models.IntegerField(default=0)),
                ('total_plated_lab_cherry_picks', models.IntegerField(default=0)),
                ('assay_plates_screened_count', models.IntegerField(default=0)),
                ('library_plates_screened_count', models.IntegerField(default=0)),
                ('library_plates_data_loaded_count', models.IntegerField(default=0)),
                ('library_plates_data_analyzed_count', models.IntegerField(default=0)),
                ('min_screened_replicate_count', models.IntegerField(null=True)),
                ('max_screened_replicate_count', models.IntegerField(null=True)),
                ('min_data_loaded_replicate_count', models.IntegerField(null=True)),
                ('max_data_loaded_replicate_count', models.IntegerField(null=True)),
                ('libraries_screened_count', models.IntegerField(null=True)),
                ('image_url', models.TextField(null=True)),
                ('species', models.TextField(null=True)),
                ('transfection_agent', models.TextField(null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'screen',
            },
        ),
        migrations.CreateModel(
            name='ScreenBillingItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=9)),
                ('date_sent_for_billing', models.DateField(null=True)),
                ('item_to_be_charged', models.TextField()),
                ('ordinal', models.IntegerField()),
                ('screen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Screen')),
            ],
            options={
                'db_table': 'screen_billing_item',
            },
        ),
        migrations.CreateModel(
            name='ScreenCellLines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_line', models.TextField()),
                ('screen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celllines', to='db.Screen')),
            ],
            options={
                'db_table': 'screen_cell_lines',
            },
        ),
        migrations.CreateModel(
            name='ScreenerCherryPick',
            fields=[
                ('screener_cherry_pick_id', models.AutoField(primary_key=True, serialize=False)),
                ('selected', models.NullBooleanField()),
            ],
            options={
                'db_table': 'screener_cherry_pick',
            },
        ),
        migrations.CreateModel(
            name='ScreenFundingSupports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('funding_support', models.TextField()),
                ('screen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fundingsupports', to='db.Screen')),
            ],
            options={
                'db_table': 'screen_funding_supports',
            },
        ),
        migrations.CreateModel(
            name='ScreenKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.TextField()),
                ('screen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='db.Screen')),
            ],
            options={
                'db_table': 'screen_keyword',
            },
        ),
        migrations.CreateModel(
            name='ScreenResult',
            fields=[
                ('screen_result_id', models.AutoField(primary_key=True, serialize=False)),
                ('replicate_count', models.IntegerField(default=0)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('channel_count', models.IntegerField(default=0, null=True)),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
                ('experimental_well_count', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'screen_result',
            },
        ),
        migrations.CreateModel(
            name='ScreensaverUser',
            fields=[
                ('screensaver_user_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_loaded', models.DateTimeField(null=True)),
                ('date_publicly_available', models.DateTimeField(null=True)),
                ('comments', models.TextField(null=True)),
                ('phone', models.TextField(null=True)),
                ('mailing_address', models.TextField(null=True)),
                ('harvard_id', models.TextField(null=True)),
                ('harvard_id_expiration_date', models.DateField(null=True)),
                ('harvard_id_requested_expiration_date', models.DateField(null=True)),
                ('ecommons_id', models.TextField(null=True)),
                ('first_name', models.TextField()),
                ('last_name', models.TextField()),
                ('email', models.TextField(null=True)),
                ('gender', models.TextField(null=True)),
                ('username', models.TextField(null=True, unique=True)),
                ('classification', models.TextField(null=True)),
                ('lab_head_appointment_category', models.TextField(null=True)),
                ('lab_head_appointment_department', models.TextField(null=True)),
                ('lab_head_appointment_update_date', models.DateField(null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_user', to='db.ScreensaverUser')),
                ('lab_affiliation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_heads', to='db.LabAffiliation')),
                ('lab_head', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_members', to='db.ScreensaverUser')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='reports.UserProfile')),
            ],
            options={
                'db_table': 'screensaver_user',
            },
        ),
        migrations.CreateModel(
            name='SmallMoleculeChembankId',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chembank_id', models.IntegerField()),
            ],
            options={
                'db_table': 'small_molecule_chembank_id',
            },
        ),
        migrations.CreateModel(
            name='SmallMoleculeChemblId',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chembl_id', models.IntegerField()),
            ],
            options={
                'db_table': 'small_molecule_chembl_id',
            },
        ),
        migrations.CreateModel(
            name='SmallMoleculeCompoundName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.TextField()),
                ('ordinal', models.IntegerField()),
            ],
            options={
                'db_table': 'small_molecule_compound_name',
            },
        ),
        migrations.CreateModel(
            name='SmallMoleculePubchemCid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubchem_cid', models.IntegerField()),
            ],
            options={
                'db_table': 'small_molecule_pubchem_cid',
            },
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField()),
                ('data_sharing_level', models.IntegerField(null=True)),
                ('date_active', models.DateField(null=True)),
                ('date_expired', models.DateField(null=True)),
                ('date_notified', models.DateField(null=True)),
                ('file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.AttachedFile')),
                ('screensaver_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.ScreensaverUser')),
            ],
            options={
                'db_table': 'user_agreement',
            },
        ),
        migrations.CreateModel(
            name='UserChecklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('is_checked', models.BooleanField()),
                ('date_effective', models.DateField()),
                ('date_notified', models.DateField(null=True)),
                ('admin_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userchecklistitems_created', to='db.ScreensaverUser')),
                ('screensaver_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.ScreensaverUser')),
            ],
            options={
                'db_table': 'user_checklist',
            },
        ),
        migrations.CreateModel(
            name='Well',
            fields=[
                ('well_id', models.TextField(primary_key=True, serialize=False)),
                ('plate_number', models.IntegerField()),
                ('well_name', models.TextField()),
                ('facility_id', models.TextField(null=True)),
                ('library_well_type', models.TextField()),
                ('is_deprecated', models.BooleanField(default=False)),
                ('deprecation_reason', models.TextField(null=True)),
                ('molar_concentration', models.DecimalField(decimal_places=12, max_digits=13, null=True)),
                ('mg_ml_concentration', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('barcode', models.TextField(null=True, unique=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Library')),
            ],
            options={
                'db_table': 'well',
            },
        ),
        migrations.CreateModel(
            name='LabActivity',
            fields=[
                ('activitylink', models.OneToOneField(db_column='activity_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.Activity')),
                ('volume_transferred_per_well_from_library_plates', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('molar_concentration', models.DecimalField(decimal_places=12, max_digits=13, null=True)),
            ],
            options={
                'db_table': 'lab_activity',
            },
            bases=('db.activity',),
        ),
        migrations.CreateModel(
            name='Molfile',
            fields=[
                ('molfile', models.TextField()),
                ('reagent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='db.Reagent')),
            ],
            options={
                'db_table': 'molfile',
            },
        ),
        migrations.CreateModel(
            name='NaturalProductReagent',
            fields=[
                ('reagentlink', models.OneToOneField(db_column='reagent_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.Reagent')),
            ],
            options={
                'db_table': 'natural_product_reagent',
            },
            bases=('db.reagent',),
        ),
        migrations.CreateModel(
            name='RnaiCherryPickRequest',
            fields=[
                ('cherry_pick_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='db.CherryPickRequest')),
            ],
            options={
                'db_table': 'rnai_cherry_pick_request',
            },
        ),
        migrations.CreateModel(
            name='SilencingReagent',
            fields=[
                ('reagentlink', models.OneToOneField(db_column='reagent_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.Reagent')),
                ('sequence', models.TextField(null=True)),
                ('anti_sense_sequence', models.TextField(null=True)),
                ('silencing_reagent_type', models.TextField(null=True)),
                ('is_restricted_sequence', models.NullBooleanField(default=False)),
                ('duplex_wells', models.ManyToManyField(to='db.Well')),
                ('facility_gene', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='facility_reagent', to='db.Gene')),
                ('vendor_gene', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendor_reagent', to='db.Gene')),
            ],
            options={
                'db_table': 'silencing_reagent',
            },
            bases=('db.reagent',),
        ),
        migrations.CreateModel(
            name='SmallMoleculeCherryPickRequest',
            fields=[
                ('cherry_pick_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='db.CherryPickRequest')),
            ],
            options={
                'db_table': 'small_molecule_cherry_pick_request',
            },
        ),
        migrations.CreateModel(
            name='SmallMoleculeReagent',
            fields=[
                ('reagentlink', models.OneToOneField(db_column='reagent_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.Reagent')),
                ('inchi', models.TextField(null=True)),
                ('molecular_formula', models.TextField(null=True)),
                ('molecular_mass', models.DecimalField(decimal_places=9, max_digits=15, null=True)),
                ('molecular_weight', models.DecimalField(decimal_places=9, max_digits=15, null=True)),
                ('smiles', models.TextField(null=True)),
                ('is_restricted_structure', models.NullBooleanField(default=False)),
            ],
            options={
                'db_table': 'small_molecule_reagent',
            },
            bases=('db.reagent',),
        ),
        migrations.AddField(
            model_name='smallmoleculepubchemcid',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Reagent'),
        ),
        migrations.AddField(
            model_name='smallmoleculecompoundname',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Reagent'),
        ),
        migrations.AddField(
            model_name='smallmoleculechemblid',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Reagent'),
        ),
        migrations.AddField(
            model_name='smallmoleculechembankid',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Reagent'),
        ),
        migrations.AddField(
            model_name='screenresult',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='screenresult',
            name='screen',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.AddField(
            model_name='screenercherrypick',
            name='cherry_pick_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screener_cherry_picks', to='db.CherryPickRequest'),
        ),
        migrations.AddField(
            model_name='screenercherrypick',
            name='screened_well',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Well'),
        ),
        migrations.AddField(
            model_name='screenercherrypick',
            name='searched_well',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searched_screener_cherry_pick', to='db.Well'),
        ),
        migrations.AddField(
            model_name='screen',
            name='collaborators',
            field=models.ManyToManyField(related_name='collaborating_screens', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='screen',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='screen',
            name='lab_head',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lab_head_screen', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='screen',
            name='lead_screener',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='led_screen', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='screen',
            name='parent_screen',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follow_up_screen', to='db.Screen'),
        ),
        migrations.AddField(
            model_name='screen',
            name='pin_transfer_approved_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pin_transfer_approved_screen', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='screen',
            name='well_studied',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Well'),
        ),
        migrations.AddField(
            model_name='resultvalue',
            name='well',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Well'),
        ),
        migrations.AddField(
            model_name='reagent',
            name='well',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reagents', to='db.Well'),
        ),
        migrations.AddField(
            model_name='rawdatatransform',
            name='cherry_pick_request',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.CherryPickRequest'),
        ),
        migrations.AddField(
            model_name='rawdatatransform',
            name='screen',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.AddField(
            model_name='rawdatainputfile',
            name='raw_data_transform',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.RawDataTransform'),
        ),
        migrations.AddField(
            model_name='publication',
            name='reagent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Reagent'),
        ),
        migrations.AddField(
            model_name='publication',
            name='screen',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.AddField(
            model_name='plate',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='plate',
            name='plate_location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.PlateLocation'),
        ),
        migrations.AddField(
            model_name='library',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='library',
            name='loaded_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='libraries_loaded', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='library',
            name='owner_screener',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_library', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='labcherrypick',
            name='cherry_pick_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_cherry_picks', to='db.CherryPickRequest'),
        ),
        migrations.AddField(
            model_name='labcherrypick',
            name='copy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copy_lab_cherry_picks', to='db.Copy'),
        ),
        migrations.AddField(
            model_name='labcherrypick',
            name='screener_cherry_pick',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.ScreenerCherryPick'),
        ),
        migrations.AddField(
            model_name='labcherrypick',
            name='source_well',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Well'),
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='screen_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.ScreenResult'),
        ),
        migrations.AddField(
            model_name='copywell',
            name='plate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Plate'),
        ),
        migrations.AddField(
            model_name='copywell',
            name='well',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Well'),
        ),
        migrations.AddField(
            model_name='copy',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='copy',
            name='library',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Library'),
        ),
        migrations.AddField(
            model_name='cherrypickrequest',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_cherry_pick', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='cherrypickrequest',
            name='requested_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_cherry_pick', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='cherrypickrequest',
            name='screen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.AddField(
            model_name='cherrypickrequest',
            name='volume_approved_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_cherry_pick', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='cherrypickassayplate',
            name='cherry_pick_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cherry_pick_assay_plates', to='db.CherryPickRequest'),
        ),
        migrations.AddField(
            model_name='cherrypickassayplate',
            name='plated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plated_cherry_pick_plates', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='cherrypickassayplate',
            name='screened_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='screened_cherry_pick_plates', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='attachedfile',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attachedfilecreated', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='attachedfile',
            name='publication',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Publication'),
        ),
        migrations.AddField(
            model_name='attachedfile',
            name='reagent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Reagent'),
        ),
        migrations.AddField(
            model_name='attachedfile',
            name='screen',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.AddField(
            model_name='attachedfile',
            name='screensaver_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='assaywell',
            name='screen_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.ScreenResult'),
        ),
        migrations.AddField(
            model_name='assaywell',
            name='well',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Well'),
        ),
        migrations.AddField(
            model_name='assayplate',
            name='plate',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Plate'),
        ),
        migrations.AddField(
            model_name='assayplate',
            name='screen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.AddField(
            model_name='activity',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities_created', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='activity',
            name='performed_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities_performed', to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='activity',
            name='screen',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='db.Screen'),
        ),
        migrations.AddField(
            model_name='activity',
            name='serviced_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.ScreensaverUser'),
        ),
        migrations.AddField(
            model_name='abasetestset',
            name='screen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Screen'),
        ),
        migrations.CreateModel(
            name='CherryPickLiquidTransfer',
            fields=[
                ('labactivitylink', models.OneToOneField(db_column='activity_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.LabActivity')),
                ('status', models.TextField()),
                ('cherry_pick_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.CherryPickRequest')),
            ],
            options={
                'db_table': 'cherry_pick_liquid_transfer',
            },
            bases=('db.labactivity',),
        ),
        migrations.CreateModel(
            name='Screening',
            fields=[
                ('labactivitylink', models.OneToOneField(db_column='activity_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.LabActivity')),
                ('assay_protocol', models.TextField()),
                ('number_of_replicates', models.IntegerField(null=True)),
                ('assay_protocol_type', models.TextField()),
                ('assay_well_volume', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('volume_transferred_per_well_to_assay_plates', models.DecimalField(decimal_places=9, max_digits=10, null=True)),
                ('assay_protocol_last_modified_date', models.DateField(null=True)),
            ],
            options={
                'db_table': 'screening',
            },
            bases=('db.labactivity',),
        ),
        migrations.AlterUniqueTogether(
            name='userchecklist',
            unique_together=set([('screensaver_user', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='useragreement',
            unique_together=set([('screensaver_user', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='screenkeyword',
            unique_together=set([('screen', 'keyword')]),
        ),
        migrations.AlterUniqueTogether(
            name='screenfundingsupports',
            unique_together=set([('screen', 'funding_support')]),
        ),
        migrations.AlterUniqueTogether(
            name='screencelllines',
            unique_together=set([('screen', 'cell_line')]),
        ),
        migrations.AlterUniqueTogether(
            name='plate',
            unique_together=set([('plate_number', 'copy')]),
        ),
        migrations.AlterUniqueTogether(
            name='genesymbol',
            unique_together=set([('gene', 'ordinal')]),
        ),
        migrations.AlterUniqueTogether(
            name='genegenbankaccessionnumber',
            unique_together=set([('gene', 'genbank_accession_number')]),
        ),
        migrations.AlterUniqueTogether(
            name='copywell',
            unique_together=set([('copy', 'plate', 'well')]),
        ),
        migrations.CreateModel(
            name='CherryPickScreening',
            fields=[
                ('screeninglink', models.OneToOneField(db_column='activity_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.Screening')),
                ('cherry_pick_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.CherryPickRequest')),
            ],
            options={
                'db_table': 'cherry_pick_screening',
            },
            bases=('db.screening',),
        ),
        migrations.CreateModel(
            name='LibraryScreening',
            fields=[
                ('screeninglink', models.OneToOneField(db_column='activity_id', on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='db.Screening')),
                ('abase_testset_id', models.TextField()),
                ('is_for_external_library_plates', models.BooleanField(default=False)),
                ('screened_experimental_well_count', models.IntegerField(default=0)),
                ('libraries_screened_count', models.IntegerField(null=True)),
                ('library_plates_screened_count', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'library_screening',
            },
            bases=('db.screening',),
        ),
        migrations.AddField(
            model_name='cherrypickassayplate',
            name='cherry_pick_liquid_transfer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.CherryPickLiquidTransfer'),
        ),
        migrations.AlterUniqueTogether(
            name='cherrypickassayplate',
            unique_together=set([('cherry_pick_request', 'plate_ordinal', 'attempt_ordinal')]),
        ),
        migrations.AddField(
            model_name='assayplate',
            name='library_screening',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='db.LibraryScreening'),
        ),
        migrations.AlterUniqueTogether(
            name='assayplate',
            unique_together=set([('library_screening', 'plate', 'replicate_ordinal')]),
        ),
    ]
